/**
* Range math operations
 */
#pragma kernel CSMain

RWTexture2D<float4> inputA; // Mutable
Texture2D<float> inputB;
float4 scalars;
int operation;

#define OP_CLAMP 16
#define OP_FRACTION 17
#define OP_MAXIMUM 18
#define OP_MINIMUM 19
#define OP_ONE_MINUS 20
#define OP_RANDOM_RANGE 21
#define OP_REMAP 22
#define OP_SATURATE 23
// #define OP_SCALAR_MAXIMUM 24
// #define OP_SCALAR_MINIMUM 5

// Hash function for random number generation
float hash(float2 p) {
    return frac(sin(dot(p, float2(12.9898, 78.233))) * 43758.5453);
}

[numthreads(8,8,1)]
void CSMain(uint3 id : SV_DispatchThreadID) {
    float4 a = inputA[id.xy];
    float4 b = inputB[id.xy];
    float4 res;

    switch (operation) {
    case OP_CLAMP:
        res = clamp(a, scalars.x, scalars.y);
        break;
    case OP_FRACTION:
        res = frac(a);
        break;
    case OP_MAXIMUM:
        res = max(a, b);
        break;
    case OP_MINIMUM:
        res = min(a, b);
        break;
    case OP_ONE_MINUS:
        res = 1.0 - a;
        break;
    case OP_RANDOM_RANGE:
        float4 rand = hash(float2(id.xy));
        res = scalars.x + (scalars.y - scalars.x) * rand;
        break;
    case OP_REMAP:
        // Remap a from [scalars.x, scalars.y] to [scalars.z, scalars.w]
        res = scalars.z + (a - scalars.x) * (scalars.w - scalars.z) / (scalars.y - scalars.x);
        break;
    case OP_SATURATE:
        res = saturate(a);
        break;
    // case OP_SCALAR_MAXIMUM:
    //     res = max(a, scalarA);
    //     break;
    // case OP_SCALAR_MINIMUM:
    //     res = min(a, scalarA);
    //     break;
    default:
        res = a;
        break;
    }

    inputA[id.xy] = res;
}
