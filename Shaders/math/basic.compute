/**
 * Basic math operations
 */
#pragma kernel CSMain

RWTexture2D<float4> inputA; // Mutable
Texture2D<float> inputB;
float4 scalars;
int operation;

#define OP_ADD 0
#define OP_SUBTRACT 1
#define OP_MULTIPLY 2
#define OP_DIVIDE 3
#define OP_POW 4
#define OP_SQRT 5
#define OP_SCALAR_ADD 6
#define OP_SCALAR_SUBTRACT 7
#define OP_SCALAR_MULTIPLY 8
#define OP_SCALAR_DIVIDE 9
#define OP_SCALAR_POW 10
#define OP_SCALAR_SQRT 11

[numthreads(8,8,1)]
void CSMain(uint3 id : SV_DispatchThreadID) {
    float4 a = inputA[id.xy];
    float b = inputB[id.xy];
    float4 res = 0;

    switch (operation) {
    case OP_ADD:
        res = a + b;
        break;
    case OP_SUBTRACT:
        res = a - b;
        break;
    case OP_MULTIPLY:
        res = a * b;
        break;
    case OP_DIVIDE:
        res = a / b;
        break;
    case OP_POW:
        res = pow(abs(a), b);
        break;
    case OP_SQRT:
        res = sqrt(a);
        break;
    case OP_SCALAR_ADD:
        res = a + scalars.x;
        break;
    case OP_SCALAR_SUBTRACT:
        res = a - scalars.x;
        break;
    case OP_SCALAR_MULTIPLY:
        res = a * scalars.x;
        break;
    case OP_SCALAR_DIVIDE:
        res = a / scalars.x;
        break;
    case OP_SCALAR_POW:
        res = pow(abs(a), scalars.x);
        break;
    case OP_SCALAR_SQRT:
        res = sqrt(scalars.x);
        break;
    default: break;
    }

    inputA[id.xy] = res;
}
