#pragma kernel CSMain

#ifdef SHADER_API_MOBILE
RWTexture2D<half4> tex1; // Mutable
Texture2D<half4> tex2; // The texture to be blended onto tex1
#else
RWTexture2D<float4> tex1; // Mutable
Texture2D<float4> tex2; // The texture to be blended onto tex1
#endif

SamplerState sampler_tex2;

int blendMode;
float opacity; // New opacity parameter

float4 Blend_Normal(float4 base, float4 blend, float opacity) {
    return lerp(base, blend.a * blend + (1.0 - blend.a) * base, opacity);
}

float4 Blend_Dissolve(float4 base, float4 blend, float2 pixelCoord, float threshold, float opacity) {
    float4 result;
    float randomValue = frac(sin(dot(pixelCoord.xy, float2(12.9898, 78.233))) * 43758.5453);
    result = (randomValue < blend.a * threshold) ? blend : base;
    result.a = base.a;
    return lerp(base, result, opacity);
}

float4 Blend_Overlay(float4 base, float4 blend, float opacity) {
    float4 result;
    result.r = (base.r > 0.5) ? 1.0 - 2.0 * (1.0 - base.r) * (1.0 - blend.r) : 2.0 * base.r * blend.r;
    result.g = (base.g > 0.5) ? 1.0 - 2.0 * (1.0 - base.g) * (1.0 - blend.g) : 2.0 * base.g * blend.g;
    result.b = (base.b > 0.5) ? 1.0 - 2.0 * (1.0 - base.b) * (1.0 - blend.b) : 2.0 * base.b * blend.b;
    result.a = base.a;
    float4 blended = blend.a * result + (1.0 - blend.a) * base;
    return lerp(base, blended, opacity);
}

float4 Blend_Multiply(float4 base, float4 blend, float opacity) {
    float4 blended = blend.a * (base * blend) + (1.0 - blend.a) * base;
    return lerp(base, blended, opacity);
}

float4 Blend_Difference(float4 base, float4 blend, float opacity) {
    float4 blended = blend.a * abs(base - blend) + (1.0 - blend.a) * base;
    return lerp(base, blended, opacity);
}

#define MODE_NORMAL 0
#define MODE_DISSOLVE 1
#define MODE_OVERLAY 2
#define MODE_MULTIPLY 3
#define MODE_DIFFERENCE 4

float4 ApplyBlend(float4 base, float4 blend, int blendMode, int2 pixelCoord, float opacity) {
    switch (blendMode) {
    case MODE_NORMAL: return Blend_Normal(base, blend, opacity);
    case MODE_DISSOLVE: return Blend_Dissolve(base, blend, pixelCoord, 1, opacity);
    case MODE_OVERLAY: return Blend_Overlay(base, blend, opacity);
    case MODE_MULTIPLY: return Blend_Multiply(base, blend, opacity);
    case MODE_DIFFERENCE: return Blend_Difference(base, blend, opacity);
    default: return base;
    }
}

[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID) {
    uint width, height;
    tex1.GetDimensions(width, height);
    if (id.x >= width || id.y >= height)
        return;

    float2 uv = float2((float)id.x / (float)width, (float)id.y / (float)height);

    float4 baseColor = tex1[int2(id.xy)];
    float4 blendColor = tex2.SampleLevel(sampler_tex2, uv, 0);

    float4 blendedColor = ApplyBlend(baseColor, blendColor, blendMode, int2(id.xy), opacity);

    // Write the blended color back to tex1
    tex1[int2(id.xy)] = blendedColor;
}