#pragma kernel CSMain

#ifdef SHADER_API_MOBILE
Texture2D<half4> tex1;
RWTexture2D<half4> result;
#else
Texture2D<float4> tex1;
RWTexture2D<float4> result;
#endif
SamplerState samplertex1;

float2 offset; // In UV space
float rotation;
float2 scale;

[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID) {
    uint width, height;
    result.GetDimensions(width, height);
    
    // Convert pixel coordinates to UV space (0 to 1)
    float2 uv = (id.xy + 0.5) / float2(width, height);
    
    // Apply offset before any other transformation
    uv -= offset;
    
    // Center the UV coordinates before applying transformations
    uv -= 0.5;
    
    // Apply scaling
    uv /= scale;
    
    // Apply rotation around the center
    float sinR = sin(rotation);
    float cosR = cos(rotation);
    float2 rotatedUV = float2(
        cosR * uv.x - sinR * uv.y,
        sinR * uv.x + cosR * uv.y
    );
    
    // Move back from center
    rotatedUV += 0.5;
    
    // Sample the texture with tiling (frac ensures UV wraps around)
    float4 sampledColor = tex1.SampleLevel(samplertex1, frac(rotatedUV), 0);
    
    // Write the result
    result[id.xy] = sampledColor;
}
