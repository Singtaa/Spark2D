#pragma kernel CSMain

RWTexture2D<float> result;

float scale;
float2 offset;
int octaves;
float lacunarity;
float gain;
float rotation;
float seed;

float2 hash(float2 p) {
    p = float2(dot(p, float2(127.1, 311.7)),
               dot(p, float2(269.5, 183.3)));
    return -1.0 + 2.0 * frac(sin(p) * 43758.5453123 + seed);
}

float snoise(float2 p) {
    const float K1 = 0.366025404; // (sqrt(3)-1)/2;
    const float K2 = 0.211324865; // (3-sqrt(3))/6;

    float2 i = floor(p + (p.x + p.y) * K1);
    float2 a = p - i + (i.x + i.y) * K2;
    float2 o = (a.x > a.y) ? float2(1.0, 0.0) : float2(0.0, 1.0);
    float2 b = a - o + K2;
    float2 c = a - 1.0 + 2.0 * K2;

    float3 h = max(0.5 - float3(dot(a, a), dot(b, b), dot(c, c)), 0.0);

    float3 n = h * h * h * h * float3(
        dot(a, hash(i + 0.0)),
        dot(b, hash(i + o)),
        dot(c, hash(i + 1.0))
    );

    return dot(n, float3(70.0, 70.0, 70.0));
}

float2 rotate2D(float2 p, float angle) {
    float s = sin(angle);
    float c = cos(angle);
    return float2(p.x * c - p.y * s, p.x * s + p.y * c);
}

float fbm(float2 p) {
    float sum = 0;
    float frequency = 1;
    float amplitude = 1;
    float maxAmplitude = 0;

    for (int i = 0; i < octaves; i++) {
        sum += amplitude * snoise(p * frequency);
        maxAmplitude += amplitude;
        frequency *= lacunarity;
        amplitude *= gain;
    }

    return sum / maxAmplitude;
}

[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID) {
    uint width, height;
    result.GetDimensions(width, height);

    // Convert pixel coordinates to UV space (0 to 1)
    float2 uv = (id.xy + 0.5) / float2(width, height);

    // Center the UV coordinates
    uv -= 0.5;

    // Apply rotation around the center
    uv = rotate2D(uv, rotation);

    // Move back from center and apply offset and scale
    uv = (uv + 0.5 - offset) * scale;

    float noise = fbm(uv);

    // Output raw FBM value without normalization or saturation
    result[id.xy] = noise;
}
